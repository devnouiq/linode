apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: tenant-onboarding
  namespace: argo-events
spec:
  amqp:
    rbmq:
      url: amqp://argo_user:newpassword@rabbitmq-service.argo-events:5672/
      exchangeName: rbmq
      exchangeType: fanout
      queueDeclare:
        durable: true
        name: onboarding_queue
      routingKey: "onboarding-key"
      jsonBody: true

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: linode-rbmq-onboarding
  namespace: argo-events
spec:
  template:
    serviceAccountName: operate-workflow-sa  # Updated service account
  dependencies:
    - name: tenant-provisioning-dep
      eventSourceName: tenant-onboarding
      eventName: rbmq
  triggers:
    - template:
        name: tenant-onboarding-template
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: tenant-onboarding-
                namespace: argo-workflows
              spec:
                serviceAccountName: operate-workflow-sa  # Updated service account
                entrypoint: tenant-provisioning
                synchronization:
                  mutex:
                    name: workflow
                arguments:
                  parameters:
                    - name: TENANT_ID
                      value: ""  # Tenant ID to be replaced by actual data from the event
                    - name: TENANT_TIER
                      value: ""  # Tenant tier to be replaced by actual data from the event
                    - name: RELEASE_VERSION
                      value: ""  # Release version to be replaced by actual data from the event
                    - name: REPO_URL
                      value: "https://github.com/devnouiq/linode"  # You can replace with actual value or template
                    - name: GIT_USER_EMAIL
                      value: "{ssh_public_key_id}"  # Replace with actual value
                    - name: GIT_USERNAME
                      value: "{ssh_public_key_id}"  # Replace with actual value
                    - name: GIT_BRANCH
                      value: "main"  # Branch for cloning the repository
                templates:
                  - name: tenant-provisioning
                    steps:
                      - - name: clone-repository
                          templateRef:
                            name: tenant-onboarding-template
                            template: clone-repository
                      - - name: validate-if-tenant-exists
                          templateRef:
                            name: tenant-onboarding-template
                            template: validate-if-tenant-exists
                      - - name: create-tenant-helm-release
                          templateRef:
                            name: tenant-onboarding-template
                            template: create-tenant-helm-release
                volumeClaimTemplates:
                  - metadata:
                      name: workdir
                    spec:
                      storageClassName: linode-block-storage-retain
                      accessModes: [ "ReadWriteOnce" ]
                      resources:
                        requests:
                          storage: 1Gi
                volumes:
                  - name: ssh-key
                    secret:
                      secretName: github-ssh-key  # Secret name for SSH key
                      items:
                        - key: ssh-privatekey
                          path: id_rsa
          parameters:
            - src:
                dependencyName: tenant-provisioning-dep
                dataKey: body.tenant_id
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: tenant-provisioning-dep
                dataKey: body.tenant_tier
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: tenant-provisioning-dep
                dataKey: body.release_version
              dest: spec.arguments.parameters.2.value
