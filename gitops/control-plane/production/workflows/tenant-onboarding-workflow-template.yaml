apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tenant-onboarding-template
  namespace: argo-workflows
spec:
  serviceAccountName: operate-workflow-sa  # Updated service account
  arguments:
    parameters:
      - name: TENANT_ID
      - name: RELEASE_VERSION
      - name: TENANT_TIER
      - name: REPO_URL
      - name: GIT_USER_EMAIL
      - name: GIT_USERNAME
      - name: GIT_BRANCH
      - name: DOMAIN_NAME  # Added DOMAIN_NAME parameter
  templates:
    - name: validate-if-tenant-exists
      container:
        image: docker.io/harshfps/workflow-scripts:latest # Replace with your Docker image name
        command: ["/bin/sh", "-c"]
        args: ['cp /mnt/ssh/id_rsa /root/.ssh/ && chmod 600 /root/.ssh/id_rsa && ./00-validate-tenant.sh {{workflow.parameters.TENANT_ID}}']
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
          - name: ssh-key
            mountPath: /mnt/ssh
        env:
          - name: GIT_SSH_COMMAND
            value: "ssh -i /root/.ssh/id_rsa"

    - name: clone-repository
      container:
        image: docker.io/harshfps/workflow-scripts:latest # Replace with your Docker image name
        command: ["/bin/sh", "-c"]
        args: ['cp /01-tenant-clone-repo.sh /mnt/vol/ && cd /mnt/vol && chmod +x 01-tenant-clone-repo.sh && echo "Cloning repository for {{workflow.parameters.TENANT_ID}}" && ./01-tenant-clone-repo.sh {{workflow.parameters.REPO_URL}} {{workflow.parameters.GIT_BRANCH}} && echo "Repository cloned successfully"']
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
          - name: ssh-key
            mountPath: /tmp/
        env:
          - name: GIT_SSH_COMMAND
            value: "ssh -i /root/.ssh/id_rsa"

    - name: create-tenant-helm-release
      container:
        image: docker.io/harshfps/workflow-scripts:latest  # Replace with your Docker image name
        command: ["/bin/sh", "-c"]
        args: ['echo "Setting up SSH key..." && mkdir -p /root/.ssh && cp /mnt/ssh/id_rsa /root/.ssh/ && chmod 600 /root/.ssh/id_rsa && echo "Testing SSH connection to GitHub..." && ssh -i /root/.ssh/id_rsa git@github.com || true && echo "Running tenant onboarding script..." && ./02-tenant-onboarding.sh {{workflow.parameters.TENANT_ID}} {{workflow.parameters.RELEASE_VERSION}} {{workflow.parameters.TENANT_TIER}} {{workflow.parameters.GIT_USER_EMAIL}} {{workflow.parameters.GIT_USERNAME}} {{workflow.parameters.GIT_BRANCH}} {{workflow.parameters.DOMAIN_NAME}}']  # Added DOMAIN_NAME to args
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
          - name: ssh-key
            mountPath: /mnt/ssh
        env:
          - name: GIT_SSH_COMMAND
            value: "ssh -i /root/.ssh/id_rsa"

    # Cleanup Template
    - name: cleanup-pvc
      script:
        image: alpine:latest
        command: [sh]
        source: |
          #!/bin/sh
          echo "Cleaning up PVCs for workflow: {{workflow.name}}"
          kubectl delete pvc --selector workflows.argoproj.io/workflow={{workflow.name}} || true

  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        storageClassName: linode-block-storage
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

  volumes:
    - name: ssh-key
      secret:
        secretName: github-ssh-key  # Secret name for SSH key
        items:
          - key: ssh-privatekey
            path: id_rsa

