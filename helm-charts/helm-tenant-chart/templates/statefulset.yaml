{{- if and (hasKey .Values.apps "mysql") .Values.apps.mysql.enabled .Values.apps.mysql.useStatefulSet }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Values.tenantId }}-mysql
  namespace: {{ $.Values.tenantId }}
  labels:
    app.kubernetes.io/name: "{{ $.Chart.Name }}-mysql"
    app.kubernetes.io/instance: "{{ $.Release.Name }}"
    app.kubernetes.io/version: "{{ $.Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ $.Release.Service }}"
    app: {{ $.Values.tenantId }}-mysql
spec:
  replicas: {{ $.Values.apps.mysql.replicaCount }}
  serviceName: {{ $.Values.tenantId }}-mysql
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ $.Chart.Name }}-mysql"
      app.kubernetes.io/instance: "{{ $.Release.Name }}"
      app: {{ $.Values.tenantId }}-mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ $.Chart.Name }}-mysql"
        app.kubernetes.io/instance: "{{ $.Release.Name }}"
        app: {{ $.Values.tenantId }}-mysql
    spec:
      containers:
        - name: mysql
          image: "{{ $.Values.apps.mysql.image.repository }}:{{ $.Values.apps.mysql.image.tag }}"
          imagePullPolicy: {{ $.Values.apps.mysql.image.pullPolicy }}
          ports:
            - name: mysql
              containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
          resources:
            {{- toYaml $.Values.apps.mysql.resources | nindent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ $.Values.apps.mysql.storageClassName | default "linode-block-storage" }}
        resources:
          requests:
            storage: {{ $.Values.apps.mysql.storageSize | default "5Gi" }}
{{- end }}
